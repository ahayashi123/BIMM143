---
title: "Structural Bioinformatics pt.2"
author: "Alyssa Hayashi"
format: pdf
---
AlphaFold has changed the game for protein structure prediction and allows you to predict the structure of proteins 

We ran alphafold via googlecolab at:
https://github.com/sokrypton/ColabFold

In particular we used AlphaFold2_mmseqs2 that uses mmseq2 rather than hmmer for dequence search 

The main outputs include a set of PDB structure files along with mstching json formsy files snd ths trll ud hoe good the resulting models might be 

Let's start by loading these structures in mol*

```{r}
library(bio3d)
pdb_files<- list.files(path= "hivpr1dimer_23119/", pattern= "*.pdb", full.names= T)

basename(pdb_files)
```

```{r}
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```

```{r}
pdbs
```

```{r}
rd <- rmsd(pdbs, fit=T)
range(rd)
rd
```

```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

```{r}
core <- core.find(pdbs)
core.inds <- print(core, vol=0.5)
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")


```
If the predicted model has more than one domain, each domain may have high confidence, yet the relative poritions of the domans may not. The estimated reliability of relative domain positions is in graphs of predicted aligned error which are included in the dowloadable zip files and analyzed in R above 

##Predicted Alignment Error for domains 

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path="hivpr1dimer_23119/",
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)

 
```

```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```

The lower the pae the better 

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```

```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```


##Residue conservation from alignment file 
```{r}
aln_file <- list.files(path="hivpr1dimer_23119/",
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

```{r}
dim(aln$ali)
sim <- conserv(aln)
```

```{r}
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```

```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq

```

```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```

